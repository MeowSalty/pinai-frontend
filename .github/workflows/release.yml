name: Create Release on Tag

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*" # 匹配语义化版本标签，如 v1.0.0, v2.1.4-beta 等

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许工作流写入内容（创建 Release）

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录以便生成 changelog

      - name: Extract version from tag
        id: get_version
        run: |
          # 去除标签前的 'v' 前缀，获取纯版本号
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate_changelog
        run: |
          # 获取当前标签
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "当前标签: $LATEST_TAG"

          # 判断当前版本是否为预发布版本
          if [[ $LATEST_TAG == *"-alpha"* ]] || [[ $LATEST_TAG == *"-beta"* ]] || [[ $LATEST_TAG == *"-rc"* ]]; then
            # 如果是预发布版本，则与上一个标签比较（无论正式版还是预发布版）
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")
            echo "检测为预发布版本，上一个标签: $PREVIOUS_TAG"
          else
            # 如果是正式版本，则只与上一个正式版本比较
            # 获取所有正式版本列表（包括当前版本）
            ALL_RELEASE_TAGS=$(git tag -l --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "-" 2>/dev/null || echo "")
            echo "检测为正式版本"
            echo "找到的所有正式版本列表:"
            echo "$ALL_RELEASE_TAGS"
            
            # 获取第一个（最新的）正式版本
            FIRST_TAG=$(echo "$ALL_RELEASE_TAGS" | head -n 1)
            echo "最新正式版本: $FIRST_TAG"
            
            # 如果最新正式版本与当前版本相同，则获取第二个作为上一个正式版本
            if [[ "$FIRST_TAG" == "$LATEST_TAG" ]]; then
              PREVIOUS_TAG=$(echo "$ALL_RELEASE_TAGS" | head -n 2 | tail -n 1)
              echo "当前版本是最新正式版本，上一个正式版本: $PREVIOUS_TAG"
            else
              # 否则第一个就是上一个正式版本
              PREVIOUS_TAG=$FIRST_TAG
              echo "上一个正式版本: $PREVIOUS_TAG"
            fi
            
            # 如果当前版本是第一个正式版本，则 PREVIOUS_TAG 会等于当前版本
            if [[ "$PREVIOUS_TAG" == "$LATEST_TAG" ]]; then
              echo "当前版本是第一个正式版本"
              PREVIOUS_TAG=""
            fi
          fi

          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有找到合适的上一个标签，显示所有提交
            echo "未找到合适的比较标签，显示所有提交"
            CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" HEAD)
          else
            # 显示两个标签之间的提交
            echo "显示从 $PREVIOUS_TAG 到 $LATEST_TAG 的提交"
            CHANGELOG=$(git log --oneline --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$LATEST_TAG)
          fi

          echo "变更日志内容:"
          echo "$CHANGELOG"

          # 多行输出需要特殊处理
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Get current timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            # 版本 ${{ steps.get_version.outputs.version }} 发布说明

            ## 变更日志
            ${{ steps.generate_changelog.outputs.changelog }}

            *自动生成于 ${{ steps.timestamp.outputs.timestamp }} UTC*
          draft: true
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
